// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract lewisura {
    mapping(address => uint256) private balances;
    event Deposited(address indexed user, uint256 amount);
    event Withdrawn(address indexed user, uint256 amount);

    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than 0");
        balances[msg.sender] += msg.value;
        emit Deposited(msg.sender, msg.value);
    }

    function withdraw(uint256 amount) public {
        require(balances[msg.sender] >= amount, "Insufficient balance");

        // Update balance sebelum transfer untuk mencegah reentrancy
        balances[msg.sender] -= amount;

        (bool success, ) = payable(msg.sender).call{value: amount}("");
        require(success, "Withdrawal failed");

        emit Withdrawn(msg.sender, amount);
    }

    // Fungsi baru untuk mendapatkan saldo pengguna lain
    function getBalance(address user) public view returns (uint256) {
        return balances[user];
    }

    // Fungsi lama tetap ada untuk mendapatkan saldo sendiri
    function getMyBalance() public view returns (uint256) {
        return balances[msg.sender];
    }

    receive() external payable {
        balances[msg.sender] += msg.value;
        emit Deposited(msg.sender, msg.value);
    }
}
